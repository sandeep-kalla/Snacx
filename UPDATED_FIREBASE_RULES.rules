rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
    }
    
    // Helper function to check if user is the meme author
    function isMemeAuthor(memeId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/memes/$(memeId)) &&
             get(/databases/$(database)/documents/memes/$(memeId)).data.authorId == request.auth.uid;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if users can interact (not blocked)
    function canUsersInteract(userId1, userId2) {
      return !exists(/databases/$(database)/documents/blockedUsers/$(userId1 + '_' + userId2)) &&
             !exists(/databases/$(database)/documents/blockedUsers/$(userId2 + '_' + userId1));
    }
    
    // Helper function to check if user is participant in chat
    function isChatParticipant(chatId, userId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/chatRooms/$(chatId)) &&
             userId in get(/databases/$(database)/documents/chatRooms/$(chatId)).data.participants;
    }
    
    // ===== CORE USER & CONTENT COLLECTIONS =====
    
    // User Profiles Collection
    match /userProfiles/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId);
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // Memes Collection - UPDATED FOR LIKES
    match /memes/{memeId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.authorId);
      allow update: if request.auth != null && 
        (isOwner(resource.data.authorId) || isAdmin() || 
         // Allow updates for likes/dislikes/comments
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'dislikes', 'comments', 'likeCount', 'dislikeCount', 'commentCount'])));
      allow delete: if request.auth != null && 
        (isOwner(resource.data.authorId) || isAdmin());
      allow list: if true;
    }
    
    // Comment Replies Collection
    match /commentReplies/{replyId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow update: if request.auth != null && isOwner(resource.data.userId);
      allow delete: if request.auth != null && 
        (isOwner(resource.data.userId) || 
         isAdmin() ||
         isMemeAuthor(resource.data.memeId));
      allow list: if true;
    }
    
    // ===== XP & ACHIEVEMENT SYSTEM =====
    
    // User XP Collection
    match /userXP/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // XP Transactions Collection
    match /xpTransactions/{transactionId} {
      allow read: if request.auth != null && 
        (isOwner(resource.data.userId) || isAdmin());
      allow create: if request.auth != null && 
        (isOwner(request.resource.data.userId) || isAdmin());
      allow update, delete: if isAdmin();
      allow list: if request.auth != null;
    }
    
    // User Achievements Collection
    match /userAchievements/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // Achievement Progress Collection
    match /achievementProgress/{userId} {
      allow read: if request.auth != null && (isOwner(userId) || isAdmin());
      allow create, update: if request.auth != null && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      allow list: if request.auth != null;
    }
    
    // ===== SOCIAL FEATURES =====
    
    // Follows Collection
    match /follows/{followId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.followerId);
      allow delete: if request.auth != null && 
        (isOwner(resource.data.followerId) || isAdmin());
      allow update: if false;
      allow list: if true;
    }
    
    // Follow Stats Collection
    match /followStats/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        (isOwner(resource.data.userId) || isAdmin());
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (isOwner(resource.data.userId) || isAdmin());
      allow delete: if request.auth != null && 
        (isOwner(resource.data.userId) || isAdmin());
      allow list: if request.auth != null;
    }
    
    // User Interactions Collection (likes, bookmarks) - UPDATED
    match /userInteractions/{interactionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow delete: if request.auth != null && 
        (isOwner(resource.data.userId) || isAdmin());
      allow update: if request.auth != null && isOwner(resource.data.userId);
      allow list: if request.auth != null;
    }
    
    // ===== MESSAGING SYSTEM =====
    
    // Chat Rooms Collection
    match /chatRooms/{chatId} {
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.participants || isAdmin());
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.participants || isAdmin());
      allow delete: if request.auth != null && 
        (isOwner(resource.data.createdBy) || isAdmin());
      allow list: if request.auth != null;
    }
    
    // Chat Messages Collection
    match /chatMessages/{messageId} {
      allow read: if request.auth != null && 
        isChatParticipant(resource.data.chatId, request.auth.uid);
      allow create: if request.auth != null && 
        isChatParticipant(request.resource.data.chatId, request.auth.uid) &&
        isOwner(request.resource.data.senderId);
      allow update: if request.auth != null && 
        (isOwner(resource.data.senderId) || isAdmin());
      allow delete: if request.auth != null && 
        (isOwner(resource.data.senderId) || isAdmin());
      allow list: if request.auth != null;
    }
    
    // Blocked Users Collection
    match /blockedUsers/{blockId} {
      allow read: if request.auth != null && 
        (isOwner(resource.data.blockerId) || isAdmin());
      allow create: if request.auth != null && isOwner(request.resource.data.blockerId);
      allow delete: if request.auth != null && 
        (isOwner(resource.data.blockerId) || isAdmin());
      allow update: if false;
      allow list: if request.auth != null;
    }
    
    // Muted Users Collection
    match /mutedUsers/{muteId} {
      allow read: if request.auth != null && 
        (isOwner(resource.data.muterId) || isAdmin());
      allow create: if request.auth != null && isOwner(request.resource.data.muterId);
      allow delete: if request.auth != null && 
        (isOwner(resource.data.muterId) || isAdmin());
      allow update: if request.auth != null && 
        (isOwner(resource.data.muterId) || isAdmin());
      allow list: if request.auth != null;
    }
    
    // ===== CONTENT MANAGEMENT =====
    
    // Hashtags Collection
    match /hashtags/{hashtagId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // Meme Hashtags Collection
    match /memeHashtags/{memeHashtagId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if request.auth != null && 
        (isOwner(resource.data.authorId) || isAdmin());
      allow list: if true;
    }
    
    // Content Counts Collection
    match /contentCounts/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // ===== ANALYTICS & TRACKING =====
    
    // Meme Views Collection
    match /memeViews/{viewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
      allow list: if true;
    }
    
    // View Stats Collection
    match /viewStats/{statsId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // ===== LEADERBOARDS & RANKINGS =====
    
    // Leaderboards Collection
    match /leaderboards/{leaderboardId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // Monthly Leaderboards Collection
    match /monthlyLeaderboards/{monthId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // ===== SYSTEM & ADMIN =====
    
    // Badge Explanations Collection
    match /badgeExplanations/{badgeId} {
      allow read: if true;
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // Admin Users Collection
    match /adminUsers/{userId} {
      allow read: if request.auth != null;
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if request.auth != null;
    }
    
    // Admin Actions Collection
    match /adminActions/{actionId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update, delete: if false;
      allow list: if isAdmin();
    }
    
    // Admins Collection
    match /admins/{adminDoc} {
      allow read: if request.auth != null;
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if request.auth != null;
    }
    
    // System Configuration Collection
    match /systemConfig/{configId} {
      allow read: if true;
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if true;
    }
    
    // App Statistics Collection
    match /appStats/{statsId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
      allow list: if true;
    }
  }
}
